{"version":3,"sources":["../lib/api.es6"],"names":["config","Object","freeze","require","app","dbService","mongoChecker","router","Router","editorRoute","route","use","set","http","port","domain","json","get","req","res","status","send","startMongoDBPolling","Promise","resolve","reject","mongoDbStatus","then","console","log","JSON","stringify","pingResult","err","editorServiceObject","post","storeToDb","bind","listen","getMongoDBObject","db","repository_","insertDocument","catch","logger","debug","module","exports"],"mappings":"AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAIA,SAASC,OAAOC,MAAP,CAAcC,QAAQ,kBAAR,CAAd,CAAb;AAAA,IACIC,MAAM,wBADV;AAAA,IAEIC,YAAY,mCAAmB,EAACL,cAAD,EAAnB,CAFhB;AAAA,IAGIM,eAAe,+BAAiBD,SAAjB,CAHnB;AAAA,IAIIE,SAAS,kBAAQC,MAAR,EAJb;AAAA,IAKIC,cAAcF,OAAOG,KAAP,CAAa,GAAb,CALlB;;AAOAN,IAAIO,GAAJ;AACAP,IAAIO,GAAJ;AACAP,IAAIQ,GAAJ,CAAQ,MAAR,EAAgBZ,OAAOa,IAAP,CAAYC,IAA5B;AACAV,IAAIQ,GAAJ,CAAQ,QAAR,EAAkBZ,OAAOa,IAAP,CAAYE,MAA9B;AACAX,IAAIO,GAAJ,CAAQ,qBAAWK,IAAX,EAAR;;AAEA;AACAZ,IAAIa,GAAJ,CAAQ,cAAR,EAAwB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClCA,QAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,MAArB;AACH,CAFD;;AAIAjB,IAAIO,GAAJ,CAAQ,SAAR,EAAmBJ,MAAnB;;AAEA,SAASe,mBAAT,GAA+B;AAC3B,WAAO,YAAEC,OAAF,CAAU,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClCnB,qBAAaoB,aAAb,GACKC,IADL,CACU,sBAAc;AAChBC,oBAAQC,GAAR,CAAY,oDAAoDC,KAAKC,SAAL,CAAeC,UAAf,CAAhE;AACAR;AACH,SAJL,EAIO,eAAO;AACNI,oBAAQC,GAAR,CAAY,0DAAZ,EAAwEI,GAAxE;AACAR;AACH,SAPL;AAQH,KATM,CAAP;AAUH;;AAEDH,sBACKK,IADL,CACU,YAAM;AACRC,YAAQC,GAAR,CAAY,6DAAZ;AACAD,YAAQC,GAAR,CAAY,6DAAZ;;AAEA,QAAIK,sBAAsB,iCAAkBlC,MAAlB,EAA0BK,SAA1B,CAA1B;AACAI,gBAAY0B,IAAZ,CAAiBD,oBAAoBE,SAApB,CAA8BC,IAA9B,CAAmCH,mBAAnC,CAAjB;;AAEA;AACA9B,QAAIkC,MAAJ,CAAWlC,IAAIa,GAAJ,CAAQ,MAAR,CAAX,EAA4Bb,IAAIa,GAAJ,CAAQ,QAAR,CAA5B,EAA+C,YAAY;AACvDW,gBAAQC,GAAR,CAAY,kDAAkDzB,IAAIa,GAAJ,CAAQ,MAAR,CAAlD,GAAoE,YAApE,GACRb,IAAIa,GAAJ,CAAQ,QAAR,CADJ;;AAGAZ,kBAAUkC,gBAAV,GAA6BZ,IAA7B,CAAkC,UAACa,EAAD,EAAQ;AACtCN,gCAAoBO,WAApB,CAAgCC,cAAhC,CAA+CF,EAA/C,EAAmD,YAAW;AAC1DZ,wBAAQC,GAAR,CAAY,gBAAZ;AACH,aAFD;AAGH,SAJD,EAIGc,KAJH,CAIS,eAAO;AACZf,oBAAQC,GAAR,CAAY,QAAZ,EAAsBI,GAAtB;AACH,SAND;AAOH,KAXD;AAYH,CArBL,EAsBKU,KAtBL,CAsBW,eAAO;AACVC,WAAOC,KAAP,CAAa,wCAAb,EAAuDZ,GAAvD;AACH,CAxBL;;AA0BAa,OAAOC,OAAP,GAAiB3C,GAAjB","file":"api.js","sourcesContent":["\"use strict\";\nimport express from \"express\";\nimport bodyParser from \"body-parser\";\nimport domain from \"express-domain-middleware\";\nimport mwAllowCrossDomain from \"./middleware_services/mwAllowCrossDomain\";\nimport {MongoDbService} from \"./MongoDB/MongoDbService\";\nimport {MongoChecker} from \"./MongoDB/MongoChecker\";\nimport {editorService} from \"./endpoints/services/editorService\";\nimport Q from \"q\";\n\nlet config = Object.freeze(require(\"../config/config\")),\n    app = express(),\n    dbService = new MongoDbService({config}),\n    mongoChecker = new MongoChecker(dbService),\n    router = express.Router(),\n    editorRoute = router.route(\"/\");\n\napp.use(mwAllowCrossDomain);\napp.use(domain);\napp.set(\"port\", config.http.port);\napp.set(\"domain\", config.http.domain);\napp.use(bodyParser.json());\n\n// health Check of Api\napp.get(\"/healthcheck\", (req, res) => {\n    res.status(200).send(\"OKYE\");\n});\n\napp.use(\"/update\", router);\n\nfunction startMongoDBPolling() {\n    return Q.Promise((resolve, reject) => {\n        mongoChecker.mongoDbStatus()\n            .then(pingResult => {\n                console.log(\"startMongoDBPolling()//Mongodb up and running: \" + JSON.stringify(pingResult));\n                resolve();\n            }, err => {\n                console.log(\"startMongoDBPolling()//Error in connecting to Mongodb...\", err);\n                reject();\n            });\n    });\n}\n\nstartMongoDBPolling()\n    .then(() => {\n        console.log(\"================MongoDB Polling Started====================\");\n        console.log(\"================MongoDB Polling Started====================\");\n\n        let editorServiceObject = new editorService(config, dbService);\n        editorRoute.post(editorServiceObject.storeToDb.bind(editorServiceObject));\n\n        // Starts the app\n        app.listen(app.get(\"port\"), app.get(\"domain\"), function () {\n            console.log(\"Server has started and is listening on port: \" + app.get(\"port\") + \" and ip : \" +\n                app.get(\"domain\"));\n\n            dbService.getMongoDBObject().then((db) => {\n                editorServiceObject.repository_.insertDocument(db, function() {\n                    console.log(\"basic inserted\");\n                });\n            }).catch(err => {\n                console.log(\"err : \", err);\n            });\n        });\n    })\n    .catch(err => {\n        logger.debug(\"Error occured in startMongoDBPolling()\", err);\n    });\n\nmodule.exports = app;\n\n\n"]}